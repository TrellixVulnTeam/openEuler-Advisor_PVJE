#!/usr/bin/python3
#******************************************************************************
# Copyright (c) Huawei Technologies Co., Ltd. 2020-2020. All rights reserved.
# licensed under the Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
#     http://license.coscl.org.cn/MulanPSL2
# THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR
# PURPOSE.
# See the Mulan PSL v2 for more details.
# ******************************************************************************/
"""
Review tool for openEuler submission
"""
import os
import argparse
import subprocess

import gitee

BASIC_CHK = """
**以下为 openEuler-Advisor 生成的审视要求清单**
**[Y]** 审视者确认符合要求 | **[N]** 审视者认为不符合要求 | **[?]** 审视者无法确认是否符合要求 | **[ ]** 审视过程中
|审视情况|审视要求|审视要求说明|
|:--:|:--|:--|
|[ ]|PR的标题是否清晰易懂?|提交标题应该一句话说明本提交实现的内容。|
|[ ]|PR的内容描述是否详细具体?|提交的描述应该用一段话说明本提交的背景和实现原理。|
|[ ]|PR和实际代码修改是否一致?|提交的说明文字应该和实际代码修改内容保持一致。|
|[ ]|PR是否符合gitee的规范检查要求?|码云对提交的缺陷扫描、规范扫描告警每一条都需要确认。|
|[ ]|PR中是否只有一次提交?|如果PR中包含多次提交，应当整合成一个，保持提交记录整洁。|
"""

LICENSE_CHK = "|[ ]|新增代码文件起始是否含有License信息?|"\
              "openEuler-Advisor遵循Mulan PSL v2协议，代码文件开头需要有Copyright和License信息。|\n"
PYLINT_CHK = "|[ ]|新增代码是否符合规范要求?|openEuler-Advisor主要由python3开发，建议pylint-3告警清零。|\n"

def check_new_code():
    """
    Check if new code file has been introduced
    """
    lst_files = subprocess.getoutput("git diff --name-only --diff-filter=A remotes/origin/master..")
    return bool(lst_files.splitlines())


def check_python_code_changes():
    """
    Check if this PR includes python code
    """
    lst_files = subprocess.getoutput("git diff --name-only remotes/origin/master..")
    for item in lst_files.splitlines():
        if item.endswith(".py"):
            return True
    return False


def review(pull_request):
    """
    Return review check list
    """
    _ = pull_request
    review_body = BASIC_CHK
    if check_python_code_changes():
        review_body += PYLINT_CHK
    if check_new_code():
        review_body += LICENSE_CHK
    return review_body

def main():
    """
    Main entrance of the functionality
    """
    pars = argparse.ArgumentParser()
    pars.add_argument("-p", "--pull", type=str, help="Number ID of Pull Request", required=True)
    pars.add_argument("-r", "--reuse", help="Reuse current local git dirctory", action="store_true")

    args = pars.parse_args()

    user_gitee = gitee.Gitee()

    gitee_url = "git@gitee.com:openeuler/openEuler-Advisor"

    if not args.reuse:
        subprocess.call(["git", "clone", gitee_url])
        os.chdir(args.repo.split('/')[1])

    subprocess.call(["git", "fetch", gitee_url,
                     "pull/{n}/head:pr_{n}".format(n=args.pull)])

    print("You are reviewing pull {n}".format(n=args.pull))

    subprocess.call(["git", "checkout", "pr_{n}".format(n=args.pull)])
    subprocess.call(["git", "merge", "--no-edit", "master"])

    pull_request = user_gitee.get_pr("openEuler-Advisor", args.pull, "openeuler")
    review_comment = review(pull_request)

    user_gitee.create_pr_comment("openEuler-Advisor", args.pull, review_comment, "openeuler")

if __name__ == "__main__":
    main()
